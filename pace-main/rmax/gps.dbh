%ifndef GPS_DBH_PROTECT
%define GPS_DBH_PROTECT 1

%define MAXGPSMESSAGESIZE 1500

%define GPSHEADERSIZE 28
%Dir gps_header_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = 0 :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
};

%define GPSNOVATELXHEADERSIZE 8
%Dir gps_novatelxHeader_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x16 :sync byte;
  uchar reserved = 0 : ;
  ushort messageID = 0 :message id;
  ushort messageLength = 0 :messageLength;
};

%Dir gps_novatelxMsg_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x16 :sync byte;
  uchar reserved = 0 : ;
  ushort messageID = 0 :message id;
  ushort messageLength = 0 :messageLength;

  uchar data[284] = {0} : message data 284 so total size remains equal to rtcaMsg;
};

%define GPS_NOVATEL_COM1      0x20
%define GPS_NOVATEL_COM2      0x40
%define GPS_NOVATEL_THISPORT  0xC0
%define GPS_NOVATEL_ONNEW     0x00
%define GPS_NOVATEL_ONCHANGED 0x01
%define GPS_NOVATEL_ONTIME    0x02
%define GPS_NOVATEL_ONNEXT    0x03
%define GPS_NOVATEL_ONCE      0x04
%define GPS_NOVATEL_ONMARK    0x05

%Dir gps_cmdResponse_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_BESTPOSB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int  responseID = 0 : ;
  char response[100] = {0} : ;
};

%define MESSAGE_LOG 1
%define LOG_BODY_SIZE 32
%Dir gps_log_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_LOG :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = LOG_BODY_SIZE :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int    port = GPS_NOVATEL_THISPORT : ;
  short  message = 0 : ;
  uchar  messageTypeL = 0 : always 0 for binary messages;
  uchar  reserved = 0 : ;
  int    trigger  = GPS_NOVATEL_ONTIME : ;
  double period = 1 : log period in seconds;
  double offset = 0 : offset for period in seconds;
  int    hold   = 0 : clear message with unlog command;  
  
  int    crc = 0 : ;
};

%define MESSAGE_UNLOGALL 38
%Dir gps_unlogall_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_UNLOGALL :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int port = GPS_NOVATEL_THISPORT : ;
  int held = 1 : remove logs that have hold flag (1-yes, 0-no);
  
  int crc = 0 : ;
};

%define NOVATEL_GNSS_SYS_GPS     0
%define NOVATEL_GNSS_SYS_GLONASS 1
%define NOVATEL_GNSS_SYS_SBAS    2
%define NOVATEL_GNSS_SYS_GALILEO 5
%define NOVATEL_GNSS_SYS_BEIDOU  6
%define NOVATEL_GNSS_SYS_QZSS    7

%define MESSAGE_UNLOCKSYSTEM 908
%Dir gps_unlockSystem_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_UNLOCKSYSTEM :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int system = NOVATEL_GNSS_SYS_GPS : ;
  
  int crc = 0 : ;
};

%define MESSAGE_CLOCKADJUST 15
%Dir gps_clkadjst_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_CLOCKADJUST :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int clkAdjst = 1 : clock adjusting is on by default ;
  
  int crc = 0 : ;
};

%define MESSAGE_RTKDYNAMICS 183
%Dir gps_rtkdyn_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_RTKDYNAMICS :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int mode = 2 : rtk dynamics set to dynamic always ;
 
  int crc = 0 : ;
};

%define MESSAGE_RTKPORTMODE 1936
%Dir gps_rtkPortMode_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_RTKPORTMODE :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int port = GPS_INTERFACE_THISPORT : ;
  int mode = 0 : 0-RTK 1-ALIGN ;
 
  int crc = 0 : ;
};

%define MESSAGE_INTERFACEMODE  3
%define GPS_INTERFACE_COM1     1
%define GPS_INTERFACE_COM2     2
%define GPS_INTERFACE_THISPORT 6
%define GPS_INTERFACE_NOVATEL  1
%define GPS_INTERFACE_RTCA     3 
%Dir gps_interfaceMode_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_INTERFACEMODE :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int port = GPS_INTERFACE_THISPORT : ;
  int rxType = GPS_INTERFACE_NOVATEL : novatel messages by default;
  int txType = GPS_INTERFACE_NOVATEL : novatel messages by default;
  int response = 1 : response on by default;
 
  int crc = 0 : ;
};

%define GPS_FIX_NONE      0
%define GPS_FIX_AUTO      1
%define GPS_FIX_HEIGHT    2
%define GPS_FIX_POSITION  3

%define MESSAGE_FIX 44
%Dir gps_fix_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_FIX :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int type = GPS_FIX_NONE : fix type ;
  double param1 = 0 : see OEM command manual pp. 72;
  double param2 = 0 : see OEM command manual pp. 72;
  double param3 = 0 : see OEM command manual pp. 72;
  
  int crc = 0 :cycle redundancy check;
};  

%define MESSAGE_MOVINGBASESTATION 763
%Dir gps_movingbasestation_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_MOVINGBASESTATION :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = GPS_NOVATEL_THISPORT :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int switch_ = 0 :  ;

  int crc = 0 :cycle redundancy check;
};  

%define MESSAGE_BESTPOSB 42
%define MESSAGE_PSRPOSB 47
%define MESSAGE_MASTERPOSB 1051
%define MESSAGE_ROVERPOSB 1052
%Dir gps_bestposb_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_BESTPOSB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 40;
  int posType = 50 :table 39;
  double Latitude = 0 :(deg-N);
  double Longitude = 0 :(deg-E);
  double Altitude = 0 :(m-MSL);
  float Undulation = 0 :(m);
  int DatumID = 0 :table 17;
  float LatitudeSD = 0.05f :(m);
  float LongitudeSD = 0.05f :(m);
  float AltitudeSD = 0.05f :(m);
  char StationID[4] = {0,0,0,0} : ;
  float DifferentialAge = 0.0 :(sec);
  float solutionAge = 0.0 :(sec);
  uchar numberOfObsTr = 0 : ;
  uchar numberOfL1 = 0 : ;
  uchar numberOfL1AboveMask = 0 : ;
  uchar numberOfL2AboveMask = 0 : ;
  uchar reserved[4] = {0,0,0,0} : ;

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_BESTVELB 99
%define MESSAGE_PSRVELB 100
%Dir gps_bestvelb_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_BESTVELB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 40;
  int velType = 50 :table 39;
  float Latency = 0.0 :(sec);
  float DifferentialAge = 0.0 :(sec);
  double HorizontalSpeed = 0.0 :(m/s);
  double Track = 0.0 :(deg);
  double VerticalSpeed = 0.0 :(m/s);
  float reserved = 0 : ;

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_HEADINGB 971
%Dir gps_headingb_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_HEADINGB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 57;
  int posType =   0 :table 56;
  float length = 0 : ;
  float heading = 0 : ;
  float pitch = 0 : ;
  float reserved = 0 : ;
  float hdgStdDev = 0 : ;
  float ptchStdDev = 0 : ;
  char stnID[4] = {0,0,0,0} : ;
  uchar numberSVs = 0 : ;
  uchar numberSolnSVs = 0 : ;
  uchar nObs = 0 : ;
  uchar nMulti = 0 : ;
  uchar reserved2 = 0 : ;
  uchar extSolStat = 0 : ;
  uchar reserved3 = 0 : ;
  uchar sigMask = 0 : ;

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_HEADING2B 1335
%Dir gps_heading2b_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_HEADINGB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 57;
  int posType =   0 :table 56;
  float length = 0 : ;
  float heading = 0 : ;
  float pitch = 0 : ;
  float reserved = 0 : ;
  float hdgStdDev = 0 : ;
  float ptchStdDev = 0 : ;
  char roverStnID[4] = {'t','a','i','l'} : ;
  char masterStnID[4] = {0,0,0,0} : ;
  uchar numberSVs = 0 : ;
  uchar numberSolnSVs = 0 : ;
  uchar nObs = 0 : ;
  uchar nMulti = 0 : ;
  uchar reserved2 = 0 : ;
  uchar extSolStat = 0 : ;
  uchar reserved3 = 0 : ;
  uchar sigMask = 0 : ;

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_PSRXYZ 243
%Dir gps_psrXYZ_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_PSRXYZ :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  uint pSolStat = 0 : table 51;
  uint posType = 0 : table 50;
  double posX = 0 : (m);
  double posY = 0 : (m);
  double posZ = 0 : (m);
  float  posXstd = 0: (m);
  float  posYstd = 0: (m);
  float  posZstd = 0: (m);
  uint vSolStat = 0 :table 51;
  uint velType = 0 :table 50;
  double velX = 0 : (m/sec);
  double velY = 0 : (m/sec);
  double velZ = 0 : (m/sec);
  float  velXstd = 0 : (m/sec);
  float  velYstd = 0 : (m/sec);
  float  velZstd = 0 : (m/sec);
  char stnID[4] = {0,0,0,0} : ;
  float vLatency = 0 : (sec);
  float diffAge = 0 : (sec);
  float solAge = 0 : (sec);
  uchar numSV = 0 : number of SV tracked;
  uchar solSv = 0 : number of SV in solution;
  char reserved1[3] = {0,0,0} : ;
  char extSolStat = 0 : table 53;
  char reserved2 = 0 :;
  char sigMask = 0 : table 52;
  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_BSLNXYZB 686
%Dir gps_bslnxyzb_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_BSLNXYZB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 57 (20000129);
  int bslnType = 0 :table 56 (20000129);
  double Bx = 0 :(m);
  double By = 0 :(m);
  double Bz = 0 :(m);
  float BxSD = 0 :(m);
  float BySD = 0 :(m);
  float BzSD = 0 :(m);
  char StationID[4] = {0,0,0,0} : ;
  uchar numberOfObsTr = 0 : ;
  uchar numberOfL1 = 0 : ;
  uchar numberOfL1AboveMask = 0 : ;
  uchar numberOfL2AboveMask = 0 : ;
  uchar reserved1 = 0 : ;
  uchar extSolStat = 0 :table 59 (20000129);
  uchar reserved2 = 0 : ;
  uchar sigMask = 0 :table 58 (2000129);

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_ALIGNBSLNENUB 1315
%Dir gps_alignbslnenub_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_ALIGNBSLNENUB :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int solStatus = 0 :table 57 (20000129);
  int bslnType = 0 :table 56 (20000129);
  double East  = 0 :(m);
  double North = 0 :(m);
  double Up    = 0 :(m);
  float EastSD  = 0 :(m);
  float NorthSD = 0 :(m);
  float UpSD    = 0 :(m);
  char RoverID[4]  = {0,0,0,0} : ;
  char MasterID[4] = {0,0,0,0} : ;
  uchar numberOfObsTr = 0 : ;
  uchar numberOfL1 = 0 : ;
  uchar numberOfL1AboveMask = 0 : ;
  uchar numberOfL2AboveMask = 0 : ;
  uchar reserved1 = 0 : ;
  uchar extSolStat = 0 :table 59 (20000129);
  uchar reserved2 = 0 : ;
  uchar sigMask = 0 :table 58 (2000129);

  int crc = 0 :cycle redundancy check;
};

%define MESSAGE_GPSEPHEM 7
%Dir gps_gpsephem_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_GPSEPHEM :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  ulong  prn = 0       : satellite PRN number;
  double tow = 0.0     : time stamp of subframe 0 (sec);
  ulong  health = 0    : health status;
  ulong  IODE1 = 0     : issue of ephemeris data 1;
  ulong  IODE2 = 0     : issue of ephemeris data 2;
  ulong  msgWeek = 0   : GPS week number;
  ulong  zweek = 0     : Z count week number (see command ref. pp 177);
  double toe = 0.0     : reference time for ephemeris (sec);
  double A = 0.0       : semi-major axis (m);
  double deltaN = 0.0  : mean motion difference (rad/sec);
  double M0 = 0.0      : mean anomaly of reference time (rad);
  double ecc = 0.0     : eccentricity ;
  double w = 0.0       : argument of perigee (rad) ;
  double cuc = 0.0     : argument of latitude (amplitude of cosine) (rad) ;
  double cus = 0.0     : argument of latitude (amplitude of sine) (rad) ;
  double crc = 0.0     : orbit radius (amplitude of cosine) (m);
  double crs = 0.0     : orbit radius (amplitude of sine) (m);
  double cic = 0.0     : inclination (amplitude of cosine) (rad);
  double cis = 0.0     : inclination (amplitude of sine) (rad);
  double I0 = 0.0      : inclination angle at reference time (rad);
  double Idot =  0.0   : rate of inclination angle (rad/sec);
  double w0 = 0.0      : right ascension (rad);
  double wdot = 0.0    : rate of right ascension (rad/sec);
  ulong  IODC = 0      : issue of data clock;
  double toc = 0.0     : SV clock correction term (sec);
  double tgd = 0.0     : estimated group delay difference (sec);
  double af0 = 0.0     : clock aging parameter (sec);
  double af1 = 0.0     : clock aging parameter (sec/sec);
  double af2 = 0.0     : clock aging parameter (sec/sec^2);
  ulong  AS = 0        : anti-spoofing on. 0-false 1-true;
  double N = 0.0       : corrected mean motion (rad/sec);
  double URA = 0       : user range accuracy variance (m^2) (see command ref. pp 178);

  int crcCheck = 0 : cyclic redundancy check;
};

%define MESSAGE_IONUTC 8
%Dir gps_ionutc_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_IONUTC :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  double alpha0 = 0 :alpha parameter constant term;
  double alpha1 = 0 :alpha parameter 1st order term;
  double alpha2 = 0 :alpha parameter 2nd order term;
  double alpha3 = 0 :alpha parameter 3rd order term;
  double b0 = 0 :beta parameter constant term;
  double b1 = 0 :beta parameter 1st order term;
  double b2 = 0 :beta parameter 2nd order term;
  double b3 = 0 :beta parameter 3rd order term;
  ulong  utcWN = 0 :UTC week number;
  ulong  tot   = 0 :reference time of UTC parameters;
  double A0    = 0 :UTC polynomial constant term;
  double A1    = 0 :UTC polynomial 1st order term;
  ulong wn_lsf = 0 :future week number;
  ulong dn     = 0 :day number;
  long  deltat_ls = 0 :delta time due to leap seconds;
  long  deltat_lsf = 0 :future delta time due to leap seconds;
  ulong reserved = 0 : ;
  
  int crc = 0 : cyclic redundancy check;
};



%define MESSAGE_RANGE 43
%Dir gps_satMeasurement_ref {
  ushort prn      = 0    : GPS satellite PRN ;
  ushort reserved = 0    : ;
  double psr      = 0.0  : pseudorange measurement (m);
  float  psrStd   = 0.0f : pseudorange measurement std dev (m);
  double adr      = 0.0  : carrier phase, in cycles (accumulated doppler range);
  float  adrStd   = 0.0f : estimated carrier phase std dev (cycles);
  float  dopp     = 0.0f : instantaneous carrier doppler freq. (Hz);
  float  C2No     = 0.0f : carrier to noise density ratio (see command ref. pp 214) (dB-Hz);
  float  lockTime = 0.0f : number of seconds of continuous tracking;
  ulong  chTrStat = 0    : tracking status (see command ref. pp 213-214);
};

%Dir gps_range_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_RANGE :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  int    numObs = 0 : number of measurement structures to follow;
  generic char measurements[2200] = {0} : ;
};



%define MESSAGE_TIME 101
%Dir gps_time_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_TIME :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int clockStatus = 0 :clock model status;
  double offset = 0 :receiver clock offset from GPS time(sec);
  double offsetStd = 0 :clock offset standard deviation;
  double utcOffset = 0 :offset of GPS time from UTC time;
  ulong utcYear    = 0 :UTC year;
  uchar utcMonth   = 0 :UTC month (0-12);
  uchar utcDay     = 0 :UTC day (0-31);
  uchar utcHour    = 0 :UTC hour (0-23);
  uchar utcMin     = 0 :UTC minute (0-59);
  ulong utcMilli   = 0 :UTC millisecond (0-60999);
  int   utcStatus  = 0 :UTC status (0-invalid,1-valid);
  
  int    crc      =  0    : cyclic redundancy check; 
};


%define MESSAGE_PSRTIME 881
%Dir gps_psrTime_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_PSRTIME :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  ulong numRecs = 0 :number of records to follow;
  uint  system  = 0 :navigation system (0-gps, 1-glonass);
  double offset = 0 :gnss time offset from the psr filter;
  double offsetStd = 0 :time offset standard deviation;
  
  int    crc      =  0    : cyclic redundancy check; 
};


%define MESSAGE_SATVIS 48
%Dir gps_satVisEntry_ref {
  ushort prn = 0 : satellite prn number;
  ushort reserved = 0 : ;
  uint   health = 0 : satellite health;
  double elev = 0 : satellite elevation(deg);
  double az = 0 : satellite azimuth(deg);
  double trueDop = 0 : Theoretical Doppler;
  double appDop = 0 : Apparent Doppler;
};

%Dir gps_satVis_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_SATVIS :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int satVis = 0 : is Satellite visability valid ? ;
  int compAlm = 0 : was complete almanan used ? ;
  ulong numSat = 0 : number of satellites ;
  generic char data[1500] = {0} : ; 
};



%define MESSAGE_SATXYZ 270
%Dir gps_satPosition_ref {
  ulong  prn      = 0 : gps satellite prn ;
  double X        = 0 : satellite X coordinate (ECEF,m);
  double Y        = 0 : satellite Y coordinate (ECEF,m);
  double Z        = 0 : satellite Z coordinate (ECEF,m);
  double clkCor   = 0 : satellite clock correction (m);
  double ionCor   = 0 : Ionospheric correction (m);
  double tropCor  = 0 : Tropospheric correction (m);
  double reserved[2] = {0,0} : reserved;
};

%Dir gps_satxyz_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_SATXYZ :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;

  double reserved = 0 : reserved ;
  int numObs = 0 : number of satellite positions to follow;
  generic char positions[1000] = {0} : ;
};

%define MESSAGE_TRACKSTAT 83

%Dir gps_trackEntry_ref {
  short prn = 0 : satellite prn;
  short glofreq = 0 : not used;
  ulong chTrStatus = 0 : channel tracking status (table 72, pp 400);
  double psr = 0 :pseudorange(m);
  float doppler = 0 : doppler frequency (Hz);
  float C2No = 0 : Carrier to noise density ratio(dB-Hz);
  float locktime = 0 : Number of seconds of continuous tracking;
  float psrRes = 0 : Pseudorange residual from filter (m);
  int reject = 0 : range reject code from filter (table 102, pp 566);
  float weight = 0 :pseudorange filter weighting;
};

%Dir gps_trackstat_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_TRACKSTAT :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 160 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  int solStatus = 0 :solution status (table 51,pp 253);
  int posType = 0 :Position type (table 50, pp 252);
  float cutoff = 0 :tracking elevation cut off angle;
  long numChannels = 0 :Number of hardware channels with info to follow;
  generic char data[1000] = {0} : ;
};

%define MESSAGE_RTCM1 107
%define GPSRTCM_HEADERSIZE 12
%Dir gpsRtcm_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar checksum = 0 :checksum;
  int   messageID = 0: message id;
  int   messageLength = 0:message length;
  uchar data[160] = {0}:rtcm data;
};

%define MESSAGE_RTCAOBS 6
%define MESSAGE_RTCA1 10
%define MESSAGE_RTCAREF 11
%define MESSAGE_RTCAEPHEM 347
%define MESSAGE_RTCAOBS2 805
%define MESSAGE_RTCAOBS3 1340
%define MESSAGE_RTCAREFEXT 1049

%define MESSAGE_HEADINGEXT2B 1661

%define MESSAGE_NOVATELXOBS 1618
%define MESSAGE_NOVATELXREF 1620

%define RTCAOBS_RESPONSE_DEBUG 79
%define RTCAEPHEM_RESPONSE_DEBUG 348
%define RTCAREF_RESPONSE_DEBUG 80
%define RTCA1_RESPONSE_DEBUG 196

%Dir gps_rtcaMsg_ref {
  uchar sync1 = 0xaa :sync byte;
  uchar sync2 = 0x44 :sync byte;
  uchar sync3 = 0x12 :sync byte;
  uchar headerLength = GPSHEADERSIZE :Length of header;
  ushort messageID = MESSAGE_RTCA1 :message id;
  uchar messageType = 0 :message type;
  uchar portAddress = 0 :serial port id address;
  ushort messageLength = 0 :messageLength;
  ushort sequence = 0 : ;
  char idleTime = 0 : ;
  uchar timeStatus = 0 : ;
  ushort week = 0 : ;
  int milliseconds = 0 : ;
  int receiverStatus = 0 : ;
  ushort reservedH = 0 : ;
  ushort receiverSWVersion = 0 : ;
  
  uchar data[264] = {0} : message data;
};

%define UBLOX_SYNC1            0xB5
%define UBLOX_SYNC2            0x62

%define UBLOX_NAV_CLASS        0x01
%define UBLOX_RXM_CLASS        0x02
%define UBLOX_INF_CLASS        0x04
%define UBLOX_ACK_CLASS        0x05
%define UBLOX_CFG_CLASS        0x06

%define UBLOX_POSLLH_ID        0x02
%define UBLOX_STATUS_ID        0x03
%define UBLOX_DOP_ID           0x04
%define UBLOX_NAVSOL_ID        0x06
%define UBLOX_NAVPVT_ID        0x07
%define UBLOX_VELNED_ID        0x12
%define UBLOX_SVINFO_ID        0x30
%define UBLOX_SBASINFO_ID      0x32

%define UBLOX_RXM_RTCM_ID      0x32

%define UBLOX_ACK_ID           0x01
%define UBLOX_NAK_ID           0x00

%define UBLOX_CFGPRT_ID        0x00
%define UBLOX_CFGMSG_ID        0x01
%define UBLOX_CFGRATE_ID       0x08
%define UBLOX_CFGCFG_ID        0x09
%define UBLOX_CFGRXM_ID        0x11
%define UBLOX_CFGSBAS_ID       0x16
%define UBLOX_CFGNAV2_ID       0x1A
%define UBLOX_CFGNAV5_ID       0x24
%define UBLOX_CFGNAVX5_ID      0x23

%define UBLOX_POSLLH_PAYLD_LENGTH        28
%define UBLOX_STATUS_PAYLD_LENGTH        16
%define UBLOX_VELNED_PAYLD_LENGTH        36
%define UBLOX_NAVSOL_PAYLD_LENGTH        52

%define UBLOX_HDR_SYNCH1_OFFSET                 0
%define UBLOX_HDR_SYNCH2_OFFSET                 1
%define UBLOX_HDR_CLASS_OFFSET                  2
%define UBLOX_HDR_ID_OFFSET                     3
%define UBLOX_HDR_PAYLOAD_SIZE_OFFSET           4

%define UBLOX_POSLLH_ITOW_OFFSET                0
%define UBLOX_POSLLH_LON_OFFSET                 4
%define UBLOX_POSLLH_LAT_OFFSET                 8
%define UBLOX_POSLLH_HEIGHT_OFFSET              12
%define UBLOX_POSLLH_HMSL_OFFSET                16
%define UBLOX_POSLLH_HACC_OFFSET                20
%define UBLOX_POSLLH_VACC_OFFSET                24


%define UBLOX_VELNED_ITOW_OFFSET                0
%define UBLOX_VELNED_VEL_N_OFFSET               4
%define UBLOX_VELNED_VEL_E_OFFSET               8
%define UBLOX_VELNED_VEL_D_OFFSET               12
%define UBLOX_VELNED_SPEED_OFFSET               16
%define UBLOX_VELNED_GSPEED_OFFSET              20
%define UBLOX_VELNED_HEADING_OFFSET             24
%define UBLOX_VELNED_SACC_OFFSET                28
%define UBLOX_VELNED_CACC_OFFSET                32


%define UBLOX_STATUS_ITOW_OFFSET                0
%define UBLOX_STATUS_GPSFIX_OFFSET              4
%define UBLOX_STATUS_GPSFLAGS_OFFSET            5
%define UBLOX_STATUS_DIFFSTATUS_OFFSET          6
%define UBLOX_STATUS_RESERVED_OFFSET            7
%define UBLOX_STATUS_TTFF_OFFSET                8
%define UBLOX_STATUS_MSSS_OFFSET                12

%define UBLOX_NAVSOL_NUMSV_OFFSET               47

%define UBLOX_STATUS_NOFIX                       0
%define UBLOX_STATUS_DEADRECK                    1
%define UBLOX_STATUS_2DFIX                       2
%define UBLOX_STATUS_3DFIX                       3

%define UBLOX_STATUS_FIXOK                       1
%define UBLOX_STATUS_DIFFSOLN                    2
%define UBLOX_STATUS_WEEKNUMVALID                4
%define UBLOX_STATUS_GPSTIMEVALID                8

%define UBLOX_STATUS_DGPS_NONE                   0
%define UBLOX_STATUS_DGPS_PRPRR                  1
%define UBLOX_STATUS_DGPS_PRPRRCP                2
%define UBLOX_STATUS_DGPS_HIGHACCCORR            3

%define UBLOX_NAVSOL_DEFAULT_NUMSAT              8

%define UBLOX_HEADING_SCALE                 100000
%define UBLOX_LATLON_SCALE                10000000

%define UBLOX_HEADER_SIZE                        6


%define ERB_HEADER_SIZE                          5
%define ERB_SYNC1                                0x45
%define ERB_SYNC2                                0x52
%define ERB_HDR_SYNCH1_OFFSET                    0
%define ERB_HDR_SYNCH2_OFFSET                    1
%define ERB_HDR_ID_OFFSET                        2
%define ERB_HDR_PAYLOAD_SIZE_OFFSET              3

%define ERB_MSG_ID_VER                           0x01
%define ERB_MSG_ID_POS                           0x02
%define ERB_MSG_ID_STAT                          0x03
%define ERB_MSG_ID_DOPS                          0x04
%define ERB_MSG_ID_VEL                           0x05
%define ERB_MSG_ID_SVI                           0x06

%define ERB_MAX_CHANNELS                         20
%define ERB_SNR_SCALE                            0.25
%define ERB_SVI_ANGLE_SCALE                      0.1
%define ERB_DOP_SCALE                            0.01

%Dir gpsUblox_posllh_ref {
  uint gpsTime         = 0 :GPS time of the week (ms);
  int lon              = 0 :longitude (deg*10^-7);
  int lat              = 0 :latitude (deg*10^-7);
  int hae              = 0 :height above ellipsoid (mm);
  int hmsl             = 0 :height above mean sealevel(mm);
  uint hacc            = 0 :horizontal accuracy est. (mm);
  uint vacc            = 0 :vertical accuracy est. (mm);
};

%Dir gpsUblox_navpvt_ref {
  uint gpsTime         = 0 :GPS time of the week (ms);
  ushort year          = 0 :GPS year;
  uchar month          = 0 :GPS month of year;
  uchar day            = 0 :GPS day of the month;
  uchar hour           = 0 :GPS hour of day;
  uchar min            = 0 :GPS minute of hour;
  uchar sec            = 0 :GPS second of minute;
  uchar valid          = 0 :bit position - 0=validDate,1=validTime,2=fullyResolved;
  uint tAcc            = 0 :Time accuracy estimate (UTC) (ns);
  int nano             = 0 :Fractions of second [-1e9,1e9] (UTC) (ns);
  uchar fixType        = 0 :0=no fix, 1=dead reckon only,2=2D-fix,3=3D-fx,4=GNSS + dead reckoning combined,5=time only fix;
  uchar flags          = 0 :bit position - 0=gnssFixOk,1=diffSoln,4=psmState,5=headVehValid,7=carrSoln (0=no solution,1=float RTK,2=Fixed RTK);
  uchar flags2         = 0 :bit position - 5=confirmedAvai,6=confirmedDate,7=confirmedTime;
  uchar numSV          = 0 :Number of SVs used in the solution;
  int lon              = 0 :longitude (deg*10^-7);
  int lat              = 0 :latitude (deg*10^-7);
  int hae              = 0 :height above ellipsoid (mm);
  int hmsl             = 0 :height above mean sealevel(mm);
  uint hacc            = 0 :horizontal accuracy est. (mm);
  uint vacc            = 0 :vertical accuracy est. (mm);
  int veln             = 0 :north vel (mm/s);
  int vele             = 0 :east vel (mm/s);
  int veld             = 0 :down vel(mm/s);
  int gspeed           = 0 :2-D speed (mm/s);
  int heading          = 0 :2-D heading (deg*10^-5);
  uint sacc            = 0 :speed accuracy estimate (mm/s);
  uint cacc            = 0 :course/heading accuracy (deg*10^-5);
  ushort pdop          = 0 :position DOP (0.01);
  uchar  reserved[6]   = {0,0,0,0,0,0} : ;
  int headVeh          = 0 :2-D heading (deg*10^-5);
  uint   reserved2     = 0 : ;
};

%Dir gpsUblox_velned_ref {
  uint gpsTime         = 0 :GPS time of the week (ms);
  int veln             = 0 :north vel (cm/s);
  int vele             = 0 :east vel (cm/s);
  int veld             = 0 :down vel(cm/s);
  uint speed           = 0 :3-D speed (cm/s);
  uint gspeed          = 0 :2-D speed (cm/s);
  int heading          = 0 :2-D heading (deg*10^-5);
  uint sacc            = 0 :speed accuracy estimate (cm/s);
  uint cacc            = 0 :course/heading accuracy (deg*10^-5);
};

%Dir gpsUblox_status_ref {
  uint gpsTime         = 0 :GPS time of the week (ms);
  uchar gpsfix         = 0 :0-nofix,1-deadreckoning,2-2D-fix,3-3D-fix;
  uchar flags          = 0 :1-fix ok, 2-diffsoln, 4-week num valid, 8-gpstime valid;
  uchar diffstatus     = 0 :0-none,1-PR+PRR corr,2-PR+PRR+CP corr,3-high acc. corr;
  uchar reserved       = 255 :;
  uint ttff            = 0 :time to first fix (ms);
  uint msss            = 0 :ms since startup (ms);
};

%Dir gpsUblox_navsol_ref {
  uint gpsTime         = 0 :GPS time of the week (ms);
  int bs               = 0 :some nanoseconds remainder from rounding;
  short gpsweek        = 0 :;
  uchar gpsfix         = 0 :0-nofix,1-deadreckoning,2-2D-fix,3-3D-fix;
  uchar flags          = 0 :1-fix ok, 2-diffsoln, 4-week num valid, 8-gpstime valid;
  int ecefx            = 0 :ECEF X coord (cm);
  int ecefy            = 0 :ECEF Y coord (cm);
  int ecefz            = 0 :ECEF Z coord (cm);
  uint pacc            = 0 :3D pos est. accuracy;
  int ecefvx           = 0 : ECEF X vel (cm/s);
  int ecefvy           = 0 : ECEF Y vel (cm/s);
  int ecefvz           = 0 : ECEF Z vel (cm/s);
  uint sacc            = 0 :3D speed est. accuracy;
  ushort pdop          = 0 : ;
  uchar  reserved      = 0 : ;
  uchar  numSV         = 0 :Number of SVs used in Nav Solution;
  uint   reserved2     = 0 : ;
};

%Dir gpsUblox_rxm_rtcm_ref {
  uchar version      = 0      :message version (0x02 for this one);
  uchar flags        = 0      :bits - 0=crcFailed;
  uchar reserved[2]  = {0, 0} :reserved;
  ushort refStation  = 0      :Reference station ID;
  ushort messageType = 0      :Message Type;
};


%Dir gpsErbVer_ref {
  uint  timeGps = 0 :GPS time of week of the navigation epoch in ms;
  uchar verH    = 0 :High level of version;
  uchar verM    = 0 :Medium level of version;
  uchar verL    = 0 :Low level of version;
  uchar align   = 0 :Not in message, but required to align memory correctly;
};

%Dir gpsErbPos_ref {
  uint timeGps  = 0 :GPS time of week of the navigation epoch in ms;
  uint align    = 0 :Not in message, but required to align memory correctly;
  double lng    = 0 :Longitude (deg);
  double lat    = 0 :Latitude (deg);
  double altEl  = 0 :Height above ellipsoid (m);
  double altMsl = 0 :Heighht above mean sea level (m);
  uint accHor   = 0 :Horizontal accuracy estimate (mm);
  uint accVer   = 0 :Vertical accuracy estimate (mm);
};

%Dir gpsErbStat_ref {
  uint   timeGps   = 0 :GPS time of week of the navigation epoch in ms;
  ushort weekGps   = 0 :Gps week number of the navigation epoch in weeks;
  uchar  fixType   = 0 :GPS Fix type (0 = no Fix, 1 = Single, 2 = Float, 3 = RTK;
  uchar  fixStatus = 0 :Navigation fix status. 1 = Pos and Vel are valid, = 0 invalid;
  uchar  numSV     = 0 :Number of used SVs;
  uchar  align[7]  = {0,0,0,0,0,0,0} :Not in message, but required to align memory correctly;
};

%Dir gpsErbDops_ref {
  uint   timeGps   = 0 :GPS time of week of the navigation epoch in ms;
  ushort dopGeo    = 0 :Geometric DOP (scaled by 0.01);
  ushort dopPos    = 0 :Position DOP (scaled by 0.01);
  ushort dopVer    = 0 :Vertical DOP (scaled by 0.01);
  ushort dopHor    = 0 :Horizontal DOP (scaled by 0.01);
  uint   align     = 0 :Not in message, but required to align memory correctly;
};

%Dir gpsErbVel_ref {
  uint   timeGps   = 0 :GPS time of week of the navigation epoch in ms;
  int    velN      = 0 :North velocity (cm/s);
  int    velE      = 0 :East velocity (cm/s);
  int    velD      = 0 :Down velocity (cm/s);
  uint   speed     = 0 :Ground speed 2D (cm/s);
  int    heading   = 0 :Heading of motion in 2D (deg, scaled by 1e-5);
  uint   accS      = 0 :Speed accuracy estimate (cm/s);
  uint   align     = 0 :Not in message, but required to align memory correctly;
};

%Dir gpsErbSviPayload_ref {
  uint   timeGps                    = 0                    :GPS time of week of the navigation epoch in ms;
  uchar  nSV                        = 0                    :Number of visible SVs;
  uchar  align[3]                   = {0,0,0}              :Not in message, but required to align memory correctly;
};

%Dir gpsErbSviChannel_ref {
  uchar  idSV   = 0 :Space vehicle ID;
  uchar  typeSV = 0 :GNSS identifier (0=GPS,1=GLONASS,2=Galileo,3=QZSS,4=BeiDou,5=LEO,6=SBAS);
  uchar  align[2] = {0,0} :Not in message, but required to align memory correctly;
  int    carPh  = 0 :Carrier-phase (cycle, scaled by 1e-2);
  int    psRan  = 0 :Pseudo range residual (m);
  int    freqD  = 0 :Doppler frequency (Hz, scaled by 1e-3);
  ushort snr    = 0 :Signal strength (Hz, scaled by 0.25);
  ushort azim   = 0 :Azimuth (deg, scaled by 1e-1);
  ushort elev   = 0 :Elevation (deg, scaled by 1e-1);
  ushort align1 = 0 :Not in message, but required to align memory correctly;
};



%Dir gpsNmea_gga_ref {
  char msgId[6]        = {'G','P','G','G','A','\0'} : The fixed message ID;
  uchar align[2]       = {0,0} :byte alignment;
  double gpsTime       = 0 :GPS UTC time of day (s);
  double lon           = 0 :longitude (deg);
  double lat           = 0 :latitude (deg);
  int quality          = 0 :0-no fix, 1-auto fix, 2- differential fix, 4-RTK, 5- Float RTK, 6-estimated (D/R) fix;
  int numSats          = 0 :number of satellites;
  double hdop          = 0 :Horizontal Dilution of Precision;
  double altMsl        = 0 :altitude above mean sealevel(m);
  double geoidSep      = 0 :Difference between geoid and mean sea level(m);
  double diffAge       = 0 :Age of differential correction (s);
  int diffStation      = 0 :ID if station providing differential correction;
  int align1           = 0 :byte alignment;
};

%Dir gpsNmea_vtg_ref {
  char msgId[6]        = {'G','P','V','T','G','\0'} : The fixed message ID;
  uchar align[2]       = {0,0} :byte alignment;
  double courseTrue    = 0 :Course over ground true (deg);
  double courseMag     = 0 :Course over ground magnetic (deg);
  double speedKnot     = 0 :Speed over ground (knot);
  double speedKph      = 0 :Speed over ground (kph);
  char posMode         = 'N' :N-no fix, E-estimate (D/R), A-auto fix, D-differential fix;
  uchar align1[7]      = {0,0,0,0,0,0,0} :byte alignment;
};

%Dir gpsNmea_rmc_ref {
  char msgId[6]        = {'G','P','R','M','C','\0'} : The fixed message ID;
  uchar status         = 0 :0=void, 1=Active;
  uchar align          = 0 :byte alignment;
  double gpsTime       = 0 :GPS UTC time of day (s);
  double lon           = 0 :longitude (deg);
  double lat           = 0 :latitude (deg);
  double speedKnot     = 0 :Speed over ground (knot);
  double courseTrue    = 0 :Course over ground true (deg);
  int week             = 0 :ex 230394 = 23rd of March, 1984;
  float magVar         = 0.0 :Magnetic variation (-ve is West);
  int align1           = 0 :byte alignment;
};

%Dir gpsNmea_gpq_ref {
  char msgId[5]          = {'G','P','G','P','Q'} : The fixed message ID - this message is sent, not read, so no null terminator;
  uchar rqstMsgId[3]     = {0, 0, 0} : The requested message ID (2-3 char);
  uchar cs[3]            = {'*', 0, 0} : The * is fixed, the other values are the checksum;
  uchar crLf[2]          = {'\r', '\n'} : Carriage return/line feed to end the message;
};

%Dir gpsNmea_gsa_ref {
  char msgId[6]                   = {'G','P','G','S','A','\0'} : The fixed message ID;
  uchar mode                      = 0 : Mode (M - manual 2D or 3D, A - auto 2D/3D);
  uchar fixMode                   = 1 : Fix mode (1 - fix not available, 2 - 2D, 3 - 3D);
  uchar numSats                   = 0 :The number of satellites - has to be calculated;
  uchar align[3]                  = {0,0,0,} :byte alignment;
  ushort sid[12] = {0,0,0,0,0,0,0,0,0,0,0,0}  :satellite IDs (max of 12 for standard NMEA);
  uint systemId                   = 0 :NMEA defined GNSS System ID (v4.1 and above only);
  float pdop                      = 0 :Position dilution of precision;
  float hdop                      = 0 :Horizontal dilution of precision;
  float vdop                      = 0 :Vertical dilution of precision;
  uint align1                     = 0 :8-byte alignment;
};

%Dir gpsNmea_svData_ref {
  uint sv              = 0   :Satellite ID;
  uint azimuth         = 0   :Satellite azimuth (deg, range 0-359);
  uint elevation       = 0   :Satellite elevation (deg, range 0-90);
  uint cno             = 0   :Satellite singal strength (C/NO, range 0-99);
  uint lockTime        = 0   :Satellite carrier lock time (seconds, 0-64 where 64 is >= 64 seconds) (comes from Ublox specific messages);
  char status          = ' ' :--Not used in solution, U-Used in solution, e-Ephemeris available/not used for nav (comes from Ublox specific messages);
  uchar align[3]       = {0,0,0} :Byte alignment;
};

%Dir gpsNmea_gsvpayload_ref {
  char msgId[6]   = {'G','P','G','S','V','\0'} : The fixed message ID;
  uchar align[2]  = {0,0} :byte alignment;
  int totalMsgs   = 0 :The total number of messages;
  int msgNum      = 0 :The message number;
  int numSats     = 0 :Number of satellites;
  int align1      = 0 :byte-alignment;
};

%Dir gpsNmea_pmtkack_ref {
  char msgId[8]          = {'P','M','T','K','0','0','1','\0'} : The fixed message ID;
  char cmd[3]            = {'0','0','0'} :The acknowledged command;
  char flag              = 0 :0-invalid, 1-unsupported, 2-valid but failed, 3-valid and succeeded;
  uchar align[4]         = {0,0,0,0} :8-byte align;
};

%Dir gpsNmea_ubxSvStatusPayload_ref {
  char msgId[5]                 = {'P','U','B','X','\0'} : The fixed message ID;
  uchar align[3]                = {0,0,0}                : byte aligned;
  int id                        = 03                     : The fixed numeric message ID;
  uint numSats                  = 0                      : Number of satellites tracked;
};

%Dir gpsNmea_ubxPosVel_ref {
  char msgId[5]        = {'P','U','B','X','\0'} : The fixed message ID;
  uchar align1[7]      = {0,0,0,0,0,0,0} :byte alignment;
  int id               = 00 : The fixed numeric message ID;
  double gpsTime       = 0 :GPS UTC time of day (s);
  double lon           = 0 :longitude (deg);
  double lat           = 0 :latitude (deg);
  double altRef        = 0 :Altitude above user datum ellipsoid (m);
  char navStat[2]      = {0, 0} :Navigation status-NF(None),DR(D/R),G2(2D),G3(3D),D2(Diff 2D),D3(Diff 3D),RK(GPS+D/R),TT(Time only);
  char align2[6]       = {0,0,0,0,0,0} :For double (8 byte) alignment;
  float hAcc           = 0 :Horizontal accuracy estimate (m);
  float vAcc           = 0 :Vertical accuracy estimate (m);
  float sog            = 0 :Speed over ground (kph);
  float cog            = 0 :Course over ground (degrees);
  double vVel          = 0 :Vertical velocity (m/s);
  float diffAge        = 0 :Age of differential correction (when used);
  float hdop           = 0 :Horizontal dilution of precision;
  float vdop           = 0 :Vertical dilution of precision;
  float tdop           = 0 :Time dilution of precision;
  int numSats          = 0 :number of satellites;
  int align            = 0 :For double (8 byte) alignment;
};

%Dir gpsNmea_ubxRate_ref {
  char msgId[4]          = {'P','U','B','X'} : The fixed message ID (sent message, so no null terminator required);
  int id                 = 40 : The fixed numeric message ID;
  uchar rqstMsgId[3]     = {0, 0, 0} : The requested message ID (2-3 char);
  int rateDdc            = 0 :Output rate on DDC relative to nav rate;
  int rateUs1            = 0 :Output rate on USART 1 relative to nav rate;
  int rateUs2            = 0 :Output rate on USART 2 relative to nav rate;
  int rateUsb            = 0 :Output rate on USB relative to nav rate;
  int rateSpi            = 0 :Output rate on SPI relative to nav rate;
  int res                = 0 :Fixed reserved field;
  uchar cs[3]            = {'*', 0, 0} : The * is fixed, the other values are the checksum;
  uchar crLf[2]          = {'\r', '\n'} : Carriage return/line feed to end the message;
};

%Dir gpsNmea_ubxConfig_ref {
  char msgId[4]          = {'P','U','B','X'} : The fixed message ID (sent message, so no null terminator required);
  int id                 = 41 : The fixed numeric message ID;
  int portId             = 0 : 0=DDC, 1=UART 1, 2=UART 2, 3=USB, 4=SPI;
  char inProto[4]        = {0,0,0,0} :Hex bitmask {2,1,0}={RTCA,NMEA,UBX};
  char outProto[4]       = {0,0,0,0} :Hex bitmask {1,0}={NMEA,UBX};
  int baudrate           = 19200 : Baudrate;
  uchar autobauding      = 0 : 1=enable, 0=disable (u-blox 5 set to 0);
  uchar cs[3]            = {'*', 0, 0} : The * is fixed, the other values are the checksum;
  uchar crLf[2]          = {'\r', '\n'} : Carriage return/line feed to end the message;
};

%endif

