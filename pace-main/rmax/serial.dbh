%ifndef SERIAL_DBH_PROTECT
%define SERIAL_DBH_PROTECT 1

%define BUFFERSIZE 1024*100

%define SI_IMU 0
%define SI_GPS 1
%define SI_MAGNET 2
%define SI_SONAR 3
%define SI_RADAR 4
%define SI_HELI1 5
%define SI_HELI2 6
%define SI_HELI3 7
%define SI_GPSREF 8
%define SI_DATALINK1 9
%define SI_DATALINK2 10
%define SI_IPC 11
%define SI_HUB 12
%define SI_FCS20SENSOR 13
%define SI_RELAY1 14
%define SI_RELAY2 15
%define SI_PWM 16
%define SI_OB2RELAYRX 17
%define SI_OB2RELAYTX 18
%define SI_GPSUBLOX 19
%define SI_HURTHC3 21
%define SI_GST     22
%define SI_RANGEFINDER 23
%define SI_GCSAUX 24
%define SI_SONYBOXCAMERA 25
%define SI_THERMALCAMERA 26
%define SI_VOB 27
%define SI_ROVERLINK 28
%define SI_HOKUYO 29
%define SI_SICK 30
%define SI_TAIL 31
%define SI_LASER 32
%define SI_YJENGINE 33
%define SI_PILOTLINK 34
%define SI_PSP 35
%define SI_PSPVIZ 36
%define SI_MSONAR 37
%define SI_QUADSAS 38
%define SI_OPTICFLOW 39
%define SI_PANTILT 40
%define SI_OB2OTHERAC 41
%define SI_TRANSPONDER 42
%define SI_SHIPLINK 43
%define SI_LANCCAMERA 44
%define SI_GPSNMEA 45
%define SI_QUADARDU 46
%define SI_DSTGIMBAL 47
%define SI_ARDUPILOT 48
%define SI_GPSERB 49
%define SI_GPSERBCOR 50
%define SI_GPSNMEACORR 51
%define SI_IPC2 52
%define SI_INTERSIM0 53
%define SI_INTERSIM1 54
%define SI_INTERSIM2 55
%define SI_INTERSIM3 56
%define SI_A2D 57
%define SI_NONE 58
%define SI_TAGTRACKER 59
%define SI_SHIPIMU 60
%define SI_VN100 61
%define SI_BOSON640 62
%define SI_PX4 63

%define PORT_OFF  0
%define PORT_ON   1
%define PORT_SITL 2
%define PORT_PLAYBACK 3
%define PORT_WORKER 4

%define MAX_WORKER_PORT 10

%define FCS20_NIOS 333

%define MODE_SERIAL 1
%define MODE_UDP    2
%define MODE_TCP    3
%define MODE_SPI    4
%define MODE_I2C    5


%define NDDS_SERIAL_DOMAIN 0
%define BSD_BASE_PORT 2000

%define SERIAL_SYNC1 0xaa
%define SERIAL_SYNC2 0x44
%define SERIAL_SEEK_SYNC1   0
%define SERIAL_SEEK_SYNC2   1
%define SERIAL_SEEK_ID_0    2
%define SERIAL_SEEK_ID_1    3
%define SERIAL_SEEK_SIZE_0  4
%define SERIAL_SEEK_SIZE_1  5
%define SERIAL_SEEK_CSUM    6
%define SERIAL_SEEK_HCSUM   7
%define SERIAL_SEEK_DATA    8


%define SERIALMSG_HEADER_SIZE 8
%define SERIALMSG_SYNC1(BUF)   *(unsigned char* )( (BUF)+0 )
%define SERIALMSG_SYNC2(BUF)   *(unsigned char* )( (BUF)+1 )
%define SERIALMSG_ID_0(BUF)    *(unsigned char* )( (BUF)+2 )
%define SERIALMSG_ID_1(BUF)    *(unsigned char* )( (BUF)+3 )
%define SERIALMSG_SIZE_0(BUF)  *(unsigned short*)( (BUF)+4 )
%define SERIALMSG_SIZE_1(BUF)  *(unsigned short*)( (BUF)+5 )
%define SERIALMSG_CSUM(BUF)    *(unsigned char* )( (BUF)+6 )
%define SERIALMSG_HCSUM(BUF)   *(unsigned char* )( (BUF)+7 )

%define SERIALMSG_ID(BUF)      *(unsigned short*)( (BUF)+2 )
%define SERIALMSG_SIZE(BUF)    *(unsigned short*)( (BUF)+4 )

%define SPI_CPHA    0x01
%define SPI_CPOL    0x02
%define SPI_MODE_0  (0|0)
%define SPI_MODE_1  (0|SPI_CPHA)
%define SPI_MODE_2  (SPI_CPOL|0)
%define SPI_MODE_3  (SPI_CPOL|SPI_CPHA)
%define SPI_CS_HIGH 0x04

%Dir serialMsgHeader_ref {
   uchar  sync1 = 0xaa : ;
   uchar  sync2 = 0x44 : ;
   ushort id    = 0    : ;
   ushort size  = 0    : ;
   uchar  csum  = 0    : ;
   uchar  hcsum = 0    : ;
};

%Dir serialPort_ref {
  int dataSource = PORT_SITL :0=off,1=on,2=SITL,3=playback,4=worker;
  int init = 1 : ;
  int port=1 :serial COM port number (1 lowest), UDP remote port when specify port manually;
  int si_port=SI_IMU :SITL port;
  int baud = 9600 : ;
  string termios = "8n1\0" : 8|7, n|o|e, 1, default is 8n1 ;
  string nameFmt = "/dev/ttyS%d\0                 " :port name format (posix);
  string name    = "\0                  " :port name (posix);
  string connectTo = "hostname\0                                       ": host name of machine to connect to;
  int    hridx     = -1 :history recording index;
  int    sridx     = -1 :stream recorder index;
  int    srmode    = -1 :stream recorder mode;
  int    portNum   = 0 : UDP port number, for automatic port;
  int    portType  = 1 : port type specifier for DSP, 0-fifo port, 1-direct uart;
  int    isServer  = 1 : is this a server port, 99 for specify port and portnum manually;
  int useSerial    = 1 : Default is to use the hardware serial - used to change modes;
  int useSock      = 0 : Use Berkeley Sockets - used to change modes;
  int useTcp       = 0 : Use tcp instead of udp - used to change modes;
  int useI2C       = 0 : Use I2C - For Jetson TX2 and other supported hardware;
  int connectionMode = 0 : The current connection mode (defaults to none (off)) (1=serial,2=UDP,3=TCP,4=SPI,5=I2C);
  int newConnectionMode = 0 : Set to a mode to change modes (1=serial,2=UDP,3=TCP,5=I2C);
  int connectState = 0 : state of tcp connection;
  int setHostnameManually = 0 : skip lookup of hostname and allow specification in myname;
  double connectRetry = 1.0 : connect retry frequency;
  double lastConnectRetry = 0.0 : last time connection was retried;
  int saveToFile   = 0 : Save data to file;
  string saveFile = "log_file%s.bin\0                                                                              " :file name to save;
  string readFile = "read%d.bin\0                                                                                  " :file to read from;
  int saveFileOpen = 0 : file is open for save;
  long saveFileFd   = 0 : file descriptor;
  int readFileOpen = 0 : file is open for save;
  long readFileFd   = 0 : file descriptor;
  int readChunk    = 1 :bytes to read per call (read from file);
  int portIsOpen = 0 : Is port open flag;
  int bytesread = 0 : ;
  int fd = 0: File Descriptor;
  ulong dropwrite = 0 : bytes dropped while writing;
  ulong dropread  = 0 : bytes dropped while reading;
  ulong sent = 0      : sent bytes;
  ulong received  = 0 : received bytes;
  int blocking     = 0 : make this a blocking port ;
  int blockingRead = 0 : make this a blocking read port;
  double blockTimeout = 0.1 : s, -1 = block for ever, timeout for select timeout;
  int blockDeadlineExpired   = 0   : nondim, blocking read timed out;
  voidptr serialDevice = 0: serial device pointer;
  voidptr sockDevice    = 0: bsd device pointer;
  string myname = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" : myhostname;
  int myport = 0 : myport;
  string remotename = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" : remotename;
  int remoteport = 0 : remoteport;
  int errorNumberRx = -1 : ;
  int errorNumberTx = -1 : ;

  string spiName    = "/dev/spidev1.1\0                  " :port name (posix);
  uchar spiSetSettings = 0 :Whether to set the settings below or use defaults;
  uchar spiMode = SPI_MODE_0 | SPI_CS_HIGH : Bit packed mode for the SPI (using the SPI definitions above) (separate with | );
  ushort spiDelay = 0 :delay (usec);
  int spiSpeed = 245000 :max speed (Hz);
  int spiBpw   = 8 :bits per word;
  
  char I2CAddress = 0 :address of I2C slave device ;
  string I2CName  = "/dev/i2c-0" :I2C port name ;

  char seekState = 0 : state machine state when using readMsg to read port ;
  char align[3] = {0}  :for alignment;
  char tmp[8] = {0,0,0,0,0,0,0,0}  : array size is SERIALMSG_HEADER_SIZE ;
  char hdr[8] = {0,0,0,0,0,0,0,0} : buffer for filling in header array size is SERIALMSG_HEADER_SIZE;
  uchar bufferView[8] = {0,0,0,0,0,0,0,0} : ;
  generic unsigned char buffer[BUFFERSIZE] = {0} : ;

  generic unsigned char spiBuffer[1024] = {0} :Used for the read/write transfers;
};

%endif


